{"version":3,"sources":["loop2.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["App","svgRef","useRef","searchLocation","window","location","search","data","useSWR","params","a","fetch","method","headers","credentials","RESPONSE","json","JSON_RESPONSE","refreshInterval","useState","visibility","transform","tooltipActive","setTooltipActive","title","tooltipContent","setTooltipContent","useEffect","current","dataPoints","data_points","series","Map","Object","entries","dataFiltered","filter","dataPoint","x","y","size","reduce","dataMap","set","id","urlParams","URLSearchParams","processManualSetMinAndMax","property","parseInt","get","findMinAndMax","urlParamMin","urlParamMax","dataFilteredArray","min","max","Math","map","abs","findCalculatedMinAndMax","Array","from","values","min_calculated","max_calculated","xMin","xMax","yMin","yMax","sizeMin","sizeMax","svg","select","width","clientWidth","height","clientHeight","xScale","scaleLinear","domain","range","yScale","sizeScale","append","attr","call","axisBottom","axisLeft","linePath","line","d","keys","forEach","seriesArray","datum","style","selectAll","enter","on","event","remove","className","onMouseOut","onMouseOver","ref","onClick","mutate","alt","src","refreshIcon","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ab25318.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loop2.37a8f9ca.svg\";","import React, { useEffect, useRef, useState } from 'react'\nimport { select } from 'd3-selection'\nimport { scaleLinear } from 'd3-scale'\nimport { axisBottom, axisLeft } from 'd3-axis'\nimport { line } from 'd3-shape'\nimport './App.css'\nimport useSWR from 'swr'\nimport refreshIcon from './loop2.svg';\nimport { mutate } from \"swr\";\nimport CSS from 'csstype';\n\ninterface DataPoint {\n  id: number;\n  x: number;\n  y: number;\n  size: number;\n  title: string;\n  [property: string]: string | number;\n}\n\ninterface CompleteGraphData {\n  data_points: DataPoint[];\n  series: Record<string, number[]>;\n}\n\nconst App: React.FC = () => {\n  const svgRef = useRef<null | SVGSVGElement>(null);\n  const searchLocation = window.location.search;\n\n  let { data } = useSWR<CompleteGraphData>(searchLocation,\n    async (params) => {\n      const RESPONSE = await fetch(\"http://localhost:5000/line_graph\" + params, {\n        method: \"GET\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/jsson',\n          'Cache': 'no-cache'\n        },\n        credentials: 'include'\n      });\n      const JSON_RESPONSE = await RESPONSE.json()\n      return JSON_RESPONSE\n    }, { refreshInterval: 30000 }\n  );\n  const [tooltipActive, setTooltipActive] = useState(() => {\n    return {\n      visibility: 'hidden',\n      transform: \"translate(0,0)\"\n    } as CSS.Properties;\n  });\n\n  const [tooltipContent, setTooltipContent] = useState(() => {\n    return { title: \"\" }\n  });\n\n  useEffect(() => {\n    if (svgRef == null || svgRef.current == null || !data) {\n      return;\n    }\n    let dataPoints = data.data_points;\n    let series = new Map(Object.entries(data.series));\n\n    let dataFiltered = dataPoints.filter(dataPoint => dataPoint.x != null\n      && dataPoint.y != null\n      && dataPoint.size != null).reduce((dataMap: Map<number, DataPoint>, dataPoint: DataPoint): Map<number, DataPoint> => {\n        dataMap.set(dataPoint.id, dataPoint);\n        return dataMap;\n      }, new Map<number, DataPoint>());\n    //determine scales\n    let findCalculatedMinAndMax = (dataFilteredArray: DataPoint[], property: string): number[] => {\n      let postProcessMinMax = (min: number, max: number) => {\n        if (max === min) {\n          if (max === 0)\n            max += 1;\n          else\n            max += Math.abs(max) * 0.1;\n        }\n        return [min, max]\n      }\n      return postProcessMinMax(\n        Math.min(...dataFilteredArray.map((dataPoint: DataPoint) => dataPoint[property] as number)),\n        Math.max(...dataFilteredArray.map((dataPoint: DataPoint) => dataPoint[property] as number))\n      );\n    };\n    const urlParams = new URLSearchParams(searchLocation);\n    let processManualSetMinAndMax = (property: string): number => {\n      return parseInt(urlParams.get(property) as string);\n    };\n\n    let findMinAndMax = (property: string, dataFiltered: Map<number, DataPoint>): number[] => {\n      let urlParamMin = processManualSetMinAndMax(`${property}Min`);\n      let urlParamMax = processManualSetMinAndMax(`${property}Max`);\n      if (!urlParamMin || !urlParamMax) {\n        let [min_calculated, max_calculated] = findCalculatedMinAndMax(Array.from(dataFiltered.values()), property);\n\n        return [(urlParamMin) ? urlParamMin : min_calculated,\n        (urlParamMax) ? urlParamMax : max_calculated];\n      }\n      return [urlParamMin, urlParamMax];\n    };\n\n    let [xMin, xMax] = findMinAndMax(\"x\", dataFiltered);\n    let [yMin, yMax] = findMinAndMax(\"y\", dataFiltered);\n    let [sizeMin, sizeMax] = findMinAndMax(\"size\", dataFiltered);\n\n    let svg = select(svgRef.current);\n    let width = svgRef.current.clientWidth - 50;\n    let height = svgRef.current.clientHeight - 50;\n    let xScale = scaleLinear()\n      .domain([xMin, xMax + Math.abs(xMax - xMin) * 0.1])\n      .range([25, width]);\n\n    let yScale = scaleLinear()\n      .domain([yMin - 0.1 * Math.abs(yMax - yMin), yMax])\n      .range([height, 65]);\n\n    let sizeScale = scaleLinear()\n      .domain([sizeMin, sizeMax + Math.abs(sizeMax - sizeMin) * 0.1])\n      .range([5, 15]);\n\n    //create axes\n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(axisBottom(xScale));\n\n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(25,0)\")\n      .call(axisLeft(yScale));\n\n    //create line\n    let linePath = line<number>()\n      .x(function (d) { return xScale((dataFiltered.get(d) as DataPoint).x) as number; })\n      .y(function (d) { return yScale((dataFiltered.get(d) as DataPoint).y) as number; });\n    if (series.size === 0) {\n      series.set(\"All Data\", Array.from(dataFiltered.keys()));\n    }\n\n    (Array.from(series.values())).forEach((seriesArray) => {\n      svg.append(\"path\")\n        .datum(seriesArray) //  Binds data to the line\n        .attr(\"class\", \"line\")\n        .attr(\"d\", linePath) // Calls the line generator\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"visibleStroke\")\n        .style(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"1px\");\n    });\n\n    //create data points\n    svg.selectAll(\".dot\")\n      .data(Array.from(dataFiltered.values()))\n      .enter().append(\"circle\")\n      .attr(\"class\", \"dot\") // Assign a class for styling\n      .attr(\"cx\", function (d) { return xScale(d.x) as number; })\n      .attr(\"cy\", function (d) { return yScale(d.y) as number; })\n      .attr(\"r\", function (d) { return sizeScale(d.size) as number })\n      .on(\"mouseover\", (event: any, dataPoint: DataPoint) => {\n        setTooltipActive({\n          transform: `translate(${xScale(dataPoint.x)}px, ${yScale(dataPoint.x)}px)`,\n          visibility: \"visible\"\n        });\n        setTooltipContent({ title: dataPoint.title });\n      })\n      .on(\"mouseout\", (event: any, dataPoint: DataPoint) => {\n        setTooltipActive((tooltipActive) => {\n          return {\n            ...tooltipActive,\n            visibility: \"hidden\"\n          }\n        });\n      });\n    return () => {\n      svg.selectAll(\".dot\").remove();\n      svg.select(\".line\").remove();\n    }\n  }, [data, searchLocation]);\n\n  let tooltipMouseoverEventListener = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    setTooltipActive({\n      ...tooltipActive,\n      visibility: \"visible\"\n    });\n  };\n\n  let tooltipMouseoutEventListener = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    setTooltipActive({\n      ...tooltipActive,\n      visibility: \"hidden\"\n    });\n  };\n\n\n\n  return (\n    <div className=\"container\">\n      <div id=\"graph-tooltip\" style={tooltipActive} onMouseOut={tooltipMouseoutEventListener}\n        onMouseOver={tooltipMouseoverEventListener}>{tooltipContent.title}</div>\n      <svg id=\"journey-timeline\" ref={svgRef} />\n      <button id=\"refresh-button\" onClick={() => mutate(searchLocation)}> <img alt=\"refresh graph\" src={refreshIcon} /></button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}