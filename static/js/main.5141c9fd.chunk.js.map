{"version":3,"sources":["loop2.svg","LineGraph.tsx","Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LineGraph","searchLocation","window","location","search","svgRef","useRef","data","useSWR","params","a","fetch","method","headers","credentials","RESPONSE","json","JSON_RESPONSE","status","refreshInterval","useState","visibility","transform","tooltipActive","setTooltipActive","title","activeElement","tooltipContent","setTooltipContent","useEffect","current","dataPoints","data_points","series","Map","Object","entries","urlParams","URLSearchParams","processManualSetMinAndMax","property","parseInt","get","findMinAndMax","urlParamMin","urlParamMax","dataFilteredArray","min","max","Math","map","dataPoint","abs","findCalculatedMinAndMax","Array","from","min_calculated","max_calculated","xMin","xMax","yMin","yMax","sizeMin","sizeMax","svg","select","width","clientWidth","height","clientHeight","xDomain","xRange","xScale","is_x_time","scaleTime","scaleLinear","yScale","domain","range","sizeScale","append","attr","call","axisBottom","axisLeft","linePath","line","x","d","y","size","set","index","forEach","seriesTuple","seriesArray","datum","style","on","event","clientX","clientY","currentTarget","classList","add","remove","selectAll","enter","className","document","cookie","includes","push","to","pathname","state","id","onMouseOut","onMouseOver","contains","ref","onClick","mutate","alt","src","refreshIcon","Login","notionCookie","setNotionCookie","history","useHistory","type","name","onChange","target","value","placeholder","cvalue","expiryDate","Date","UTC","toUTCString","storeNotionCookie","length","goBack","tryLogin","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5141c9fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loop2.37a8f9ca.svg\";","import React, { useEffect, useRef, useState } from 'react'\nimport { select } from 'd3-selection'\nimport { scaleLinear, scaleTime } from 'd3-scale'\nimport { axisBottom, axisLeft } from 'd3-axis'\nimport { line } from 'd3-shape'\nimport './App.scss'\nimport useSWR from 'swr'\nimport refreshIcon from './loop2.svg';\nimport { mutate } from \"swr\";\nimport CSS from 'csstype';\nimport { Redirect } from 'react-router-dom'\n\ninterface DataPoint {\n  index: number;\n  x: number;\n  y: number;\n  size: number;\n  title: string;\n  [property: string]: string | number;\n}\n\ninterface CompleteGraphData {\n  data_points: DataPoint[];\n  series: Record<string, number[]>;\n  is_x_time: boolean;\n}\n\nconst LineGraph: React.FC = () => {\n  const searchLocation = window.location.search;\n  const svgRef = useRef<null | SVGSVGElement>(null);\n  let { data } = useSWR<CompleteGraphData>(searchLocation,\n    async (params) => {\n      const RESPONSE = await fetch(\"http://localhost:5000/line_graph\" + params, {\n        method: \"GET\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/jsson',\n          'Cache': 'no-cache'\n        },\n        credentials: 'include'\n      });\n      const JSON_RESPONSE = await RESPONSE.json()\n      if (RESPONSE.status === 400) {\n        throw JSON_RESPONSE\n      }\n      return JSON_RESPONSE\n    }, { refreshInterval: 30000 }\n  );\n  const [tooltipActive, setTooltipActive] = useState(() => {\n    return {\n      visibility: 'hidden',\n      transform: \"translate(0,0)\"\n    } as CSS.Properties;\n  });\n\n  const [tooltipContent, setTooltipContent] = useState(() => {\n    return { title: \"\", activeElement: null as unknown as undefined | HTMLElement }\n  });\n\n  useEffect(() => {\n    if (svgRef == null || svgRef.current == null || !data) {\n      return;\n    }\n    let dataPoints = data.data_points;\n    let series = new Map(Object.entries(data.series));\n\n    //determine scales\n    let findCalculatedMinAndMax = (dataFilteredArray: DataPoint[], property: string): number[] => {\n      let postProcessMinMax = (min: number, max: number) => {\n        if (max === min) {\n          if (max === 0)\n            max += 1;\n          else\n            max += Math.abs(max) * 0.1;\n        }\n        return [min, max]\n      }\n      return postProcessMinMax(\n        Math.min(...dataFilteredArray.map((dataPoint: DataPoint) => dataPoint[property] as number)),\n        Math.max(...dataFilteredArray.map((dataPoint: DataPoint) => dataPoint[property] as number))\n      );\n    };\n    const urlParams = new URLSearchParams(searchLocation);\n    let processManualSetMinAndMax = (property: string): number => {\n      return parseInt(urlParams.get(property) as string);\n    };\n\n    let findMinAndMax = (property: string, dataPoints: DataPoint[]): number[] => {\n      let urlParamMin = processManualSetMinAndMax(`${property}Min`);\n      let urlParamMax = processManualSetMinAndMax(`${property}Max`);\n      if (!urlParamMin || !urlParamMax) {\n        let [min_calculated, max_calculated] = findCalculatedMinAndMax(Array.from(dataPoints), property);\n\n        return [(urlParamMin) ? urlParamMin : min_calculated,\n        (urlParamMax) ? urlParamMax : max_calculated];\n      }\n      return [urlParamMin, urlParamMax];\n    };\n\n    let [xMin, xMax] = findMinAndMax(\"x\", dataPoints);\n    let [yMin, yMax] = findMinAndMax(\"y\", dataPoints);\n    let [sizeMin, sizeMax] = findMinAndMax(\"size\", dataPoints);\n\n    let svg = select(svgRef.current);\n    let width = svgRef.current.clientWidth - 50;\n    let height = svgRef.current.clientHeight - 50;\n\n    let xDomain = [xMin, xMax + Math.abs(xMax - xMin) * 0.1];\n    let xRange = [25, width];\n    let xScale = (data.is_x_time ? scaleTime(xDomain, xRange)\n      : scaleLinear(xDomain, xRange));\n\n    let yScale = scaleLinear()\n      .domain([yMin - 0.1 * Math.abs(yMax - yMin), yMax])\n      .range([height, 65]);\n\n    let sizeScale = scaleLinear()\n      .domain([sizeMin, sizeMax + Math.abs(sizeMax - sizeMin) * 0.1])\n      .range([5, 15]);\n\n    //create axes\n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(axisBottom(xScale));\n\n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(25,0)\")\n      .call(axisLeft(yScale));\n\n    //create line\n    let linePath = line<number>()\n      .x(function (d) { return xScale((dataPoints[d] as DataPoint).x) as number; })\n      .y(function (d) { return yScale((dataPoints[d] as DataPoint).y) as number; })\n\n    if (series.size === 0) {\n      series.set(\"All Data\", dataPoints.map((dataPoint) => dataPoint.index));\n    }\n\n    (Array.from(series.entries())).forEach((seriesTuple) => {\n      let seriesArray = seriesTuple[1];\n      svg.append(\"path\")\n        .datum(seriesArray) //  Binds data to the line\n        .attr(\"class\", \"line\")\n        .attr(\"d\", linePath) // Calls the line generator\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"visibleStroke\")\n        .style(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"1px\")\n        .on(\"mouseover\", (event: any, datum) => {\n          setTooltipActive({\n            transform: `translate(${event.clientX - 10}px, ${event.clientY - 10}px)`,\n            visibility: \"visible\"\n          });\n          setTooltipContent({ title: seriesTuple[0], activeElement: event.currentTarget });\n          svgRef.current?.classList.add(\"faded\");\n        }).on(\"mouseout\", (event: any, datum) => {\n          setTooltipActive((tooltipActive) => {\n            return {\n              ...tooltipActive,\n              visibility: \"hidden\"\n            }\n          });\n          svgRef.current?.classList.remove(\"faded\");\n        });\n\n    });\n\n\n    //create data points\n    svg.selectAll(\".dot\")\n      .data(Array.from(dataPoints))\n      .enter().append(\"circle\")\n      .attr(\"class\", \"dot\") // Assign a class for styling\n      .attr(\"cx\", function (d) { return xScale(d.x) as number; })\n      .attr(\"cy\", function (d) { return yScale(d.y) as number; })\n      .attr(\"r\", function (d) { return sizeScale(d.size) as number })\n      .on(\"mouseover\", (event: any, dataPoint: DataPoint) => {\n        setTooltipActive({\n          transform: `translate(${xScale(dataPoint.x)}px, ${yScale(dataPoint.y)}px)`,\n          visibility: \"visible\"\n        });\n        setTooltipContent({ title: dataPoint.title, activeElement: event.currentTarget });\n      })\n      .on(\"mouseout\", (event: any, dataPoint: DataPoint) => {\n        setTooltipActive((tooltipActive) => {\n          return {\n            ...tooltipActive,\n            visibility: \"hidden\"\n          }\n        });\n      });\n    return () => {\n      svg.selectAll(\".dot\").remove();\n      svg.select(\".line\").remove();\n    }\n  }, [data, searchLocation]);\n\n  let tooltipMouseoverEventListener = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    setTooltipActive({\n      ...tooltipActive,\n      visibility: \"visible\"\n    });\n    tooltipContent.activeElement?.classList.add(\"active\");\n    if (tooltipContent.activeElement?.classList.contains(\"line\"))\n      svgRef.current?.classList.add(\"faded\");\n  };\n\n  let tooltipMouseoutEventListener = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    setTooltipActive({\n      ...tooltipActive,\n      visibility: \"hidden\"\n    });\n    tooltipContent.activeElement?.classList.remove(\"active\");\n    svgRef.current?.classList.remove(\"faded\");\n  };\n\n  return (\n    <div className=\"container\">\n      {\n        !document.cookie.includes(\"token_v2\") &&\n        <Redirect push\n          to={{\n            pathname: \"/login\",\n            state: { from: searchLocation }\n          }}\n        />\n      }\n      <div id=\"graph-tooltip\" style={tooltipActive} onMouseOut={tooltipMouseoutEventListener}\n        onMouseOver={tooltipMouseoverEventListener}>{tooltipContent.title}</div>\n      <svg id=\"journey-timeline\" ref={svgRef} />\n      <button id=\"refresh-button\" onClick={() => mutate(searchLocation)}> <img alt=\"refresh graph\" src={refreshIcon} /></button>\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState } from 'react'\nimport {\n  Redirect,\n  useHistory\n} from \"react-router-dom\";\n\nconst Login: React.FC = () => {\n\n  let [notionCookie, setNotionCookie] = useState(\"\");\n  let history = useHistory();\n\n  function storeNotionCookie(cvalue: string) {\n    let expiryDate = new Date(Date.UTC(2052, 7, 17, 0, 0, 0));\n    document.cookie = `token_v2=${cvalue};expires=${expiryDate.toUTCString()};path=/`;\n  }\n  function tryLogin() {\n    if (history.length === 0) {\n      return (<Redirect to=\"/login\" />);\n    } else {\n      history.goBack();\n    }\n  }\n\n  function loginAction() {\n    storeNotionCookie(notionCookie);\n    tryLogin();\n  };\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setNotionCookie(event.target.value);\n  }\n\n  return (\n    <div className=\"container\">\n      <input type=\"text\" id=\"fname\" name=\"fname\" onChange={handleChange} placeholder=\"Login with your Notion Cookie\" />\n      <button onClick={loginAction}>Submit</button>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport LineGraph from './LineGraph';\nimport Login from './Login';\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/login\">\n                    <Login />\n                </Route>\n                <Route path=\"/line_graph\">\n                    <LineGraph />\n                </Route>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}