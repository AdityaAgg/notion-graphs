{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","loop2.svg"],"names":["App","svgRef","useRef","data","useSWR","window","location","search","params","a","fetch","response","json","jsonResponse","refreshInterval","useEffect","current","svg","select","width","clientWidth","height","clientHeight","xScale","scaleLinear","domain","range","yScale","linePath","line","x","d","id","y","value","append","attr","call","axisBottom","axisLeft","remove","datum","style","selectAll","enter","size","on","b","c","console","log","className","ref","onClick","mutate","alt","src","refreshIcon","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"4UA6FeA,EA7EO,WACpB,IAAMC,EAASC,iBAA6B,MACtCC,EAASC,YAAoBC,OAAOC,SAASC,OAA9B,uCACnB,WAAOC,GAAP,iBAAAC,EAAA,sEACyBC,MAAM,yFAA2FF,GAD1H,cACQG,EADR,gBAE6BA,EAASC,OAFtC,cAEQC,EAFR,yBAGSA,EAAY,QAHrB,2CADmB,sDAKhB,CAAEC,gBAAiB,MALlBX,KAmEN,OA1DAY,qBAAU,WACR,GAAc,MAAVd,GAAoC,MAAlBA,EAAOe,QAA7B,CAIA,IAAIC,EAAMC,YAAOjB,EAAOe,SACpBG,EAAQlB,EAAOe,QAAQI,YAAc,GACrCC,EAASpB,EAAOe,QAAQM,aAAe,GACvCC,EAASC,cACVC,OAAO,CAAC,EAAG,KACXC,MAAM,CAAC,GAAIP,IAEVQ,EAASH,cACVC,OAAO,CAAC,EAAG,IACXC,MAAM,CAACL,EAAQ,KAEdO,EAAWC,cACZC,GAAE,SAAUC,GAAK,OAAOR,EAAOQ,EAAEC,OACjCC,GAAE,SAAUF,GAAK,OAAOJ,EAAOI,EAAEG,UAGpCjB,EAAIkB,OAAO,KACRC,KAAK,QAAS,UACdA,KAAK,YAAa,gBAAkBf,EAAS,IAAM,KACnDgB,KAAKC,YAAWf,IAGnBN,EAAIkB,OAAO,KACRC,KAAK,QAAS,UACdA,KAAK,YAAa,qBAClBC,KAAKE,YAASZ,IACbxB,IACFc,EAAIC,OAAO,SAASsB,SACpBvB,EAAIkB,OAAO,QACRM,MAAMtC,GACNiC,KAAK,QAAS,QACdA,KAAK,IAAKR,GACVQ,KAAK,OAAQ,QACbA,KAAK,iBAAkB,iBACvBM,MAAM,SAAU,SAChBN,KAAK,eAAgB,OAExBnB,EAAI0B,UAAU,QAAQH,SAEtBvB,EAAI0B,UAAU,QACXxC,KAAKA,GACLyC,QAAQT,OAAO,UACfC,KAAK,QAAS,OACdA,KAAK,MAAM,SAAUL,GAAK,OAAOR,EAAOQ,EAAEC,OAC1CI,KAAK,MAAM,SAAUL,GAAK,OAAOJ,EAAOI,EAAEG,UAC1CE,KAAK,KAAK,SAAUL,GAAK,OAAgB,EAATA,EAAEc,QAClCC,GAAG,aAAa,SAAUrC,EAAGsC,EAAGC,GAC/BC,QAAQC,IAAIzC,MAEbqC,GAAG,YAAY,mBAEnB,CAAC3C,IAGF,yBAAKgD,UAAU,aACb,yBAAKnB,GAAG,mBAAmBoB,IAAKnD,IAChC,4BAAQ+B,GAAG,iBAAiBqB,QAAS,kBAAMC,YAAO,mGAAlD,IAAqJ,yBAAKC,IAAI,gBAAgBC,IAAKC,SC5ErKC,QACW,cAA7BrD,OAAOC,SAASqD,UAEe,UAA7BtD,OAAOC,SAASqD,UAEhBtD,OAAOC,SAASqD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.d47f120f.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { select } from 'd3-selection'\nimport { scaleLinear } from 'd3-scale'\nimport { axisBottom, axisLeft } from 'd3-axis'\nimport { line } from 'd3-shape'\nimport './App.css'\nimport useSWR from 'swr'\nimport refreshIcon from './loop2.svg';\nimport { mutate } from \"swr\";\n\ninterface DataPoint {\n  value: number;\n  id: number;\n  size: number;\n}\n\nconst App: React.FC = () => {\n  const svgRef = useRef<null | SVGSVGElement>(null);\n  let { data } = useSWR<DataPoint[]>(window.location.search,\n    async (params) => {\n      const response = await fetch(\"https://pnw3gi739c.execute-api.us-east-1.amazonaws.com/production-stage/get_all_events\" + params)\n      const jsonResponse = await response.json()\n      return jsonResponse[\"events\"]\n    }, { refreshInterval: 30000 }\n  );\n\n\n  useEffect(() => {\n    if (svgRef == null || svgRef.current == null) {\n      return;\n    }\n\n    let svg = select(svgRef.current);\n    let width = svgRef.current.clientWidth - 50;\n    let height = svgRef.current.clientHeight - 50;\n    let xScale = scaleLinear()\n      .domain([0, 50]) // input\n      .range([25, width]); // output\n\n    let yScale = scaleLinear()\n      .domain([0, 5]) // input\n      .range([height, 50]); // output\n\n    let linePath = line<DataPoint>()\n      .x(function (d) { return xScale(d.id) as number; }) // set the x values for the line generator\n      .y(function (d) { return yScale(d.value) as number; }); // set the y values for the line generator\n\n\n    svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + (height - 25) + \")\")\n      .call(axisBottom(xScale)); // Create an axis component with d3.axisBottom\n\n    // 4. Call the y axis in a group tag\n    svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(25,-25)\")\n      .call(axisLeft(yScale));\n    if (data) {\n      svg.select(\".line\").remove();\n      svg.append(\"path\")\n        .datum(data) // 10. Binds data to the line\n        .attr(\"class\", \"line\") // Assign a class for styling\n        .attr(\"d\", linePath) // 11. Calls the line generator\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"visibleStroke\")\n        .style(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"1px\");\n\n      svg.selectAll(\".dot\").remove();\n      // 12. Appends a circle for each datapoint\n      svg.selectAll(\".dot\")\n        .data(data)\n        .enter().append(\"circle\") // Uses the enter().append() method\n        .attr(\"class\", \"dot\") // Assign a class for styling\n        .attr(\"cx\", function (d) { return xScale(d.id) as number; })\n        .attr(\"cy\", function (d) { return yScale(d.value) as number; })\n        .attr(\"r\", function (d) { return d.size * 5 })\n        .on(\"mouseover\", function (a, b, c) {\n          console.log(a);\n        })\n        .on(\"mouseout\", function () { });\n    }\n  }, [data]);\n\n  return (\n    <div className=\"container\">\n      <svg id=\"journey-timeline\" ref={svgRef} />\n      <button id=\"refresh-button\" onClick={() => mutate('url=https://www.notion.so/c9900066ef9543d986543f7db6594ae3?v=e1498ba37c6043dc9cda20aed703a3a7')}> <img alt=\"refresh graph\" src={refreshIcon} /></button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loop2.9dfc4175.svg\";"],"sourceRoot":""}